package com.incquerylabs.emdw.cpp.codegeneration.queries

import "http://www.eclipse.org/papyrusrt/xtumlrt/common"
import "http://www.eclipse.org/papyrusrt/xtumlrt/xtuml"
import "http://www.ericsson.com/xtumlrt/oopl/cpp"
import "http://www.ericsson.com/xtumlrt/oopl"

pattern classStateMachine(
	xtClass : XTClass,
	cppClass : CPPClass,
	statemachine : StateMachine
) {
	XTClass.behaviour(xtClass, statemachine);
	CPPClass.xtClass(cppClass, xtClass);
}

pattern stateMachineStates(
	stateMachine : StateMachine,
	state : State
) {
	StateMachine.top(stateMachine, top);
	find compositeStateSubStates+(top, state);
}

pattern compositeStateSubStates(
	compositeState : CompositeState,
	subState : State
) {
	CompositeState.substates(compositeState, subState);
}

pattern classStateMachineStates(
	xtClass : XTClass,
	cppClass : CPPClass,
	state : State
) {
	find classStateMachine(xtClass, cppClass, statemachine);
	find stateMachineStates(statemachine, state);
}

pattern classStateMachineTransitions(
	xtClass : XTClass,
	cppClass : CPPClass,
	transition : Transition
) {
	find classStateMachineStates(xtClass, cppClass, state);
	CompositeState.transitions(state, transition);
}

pattern classStateMachineEvents(
	xtClass : XTClass,
	cppClass : CPPClass,
	event : XTEvent
) {
	find classStateMachineTransitions(xtClass, cppClass, transition);
	Transition.triggers(transition, trigger);
	XTEventTrigger.signal(trigger, event);
}

pattern cppTransitionInfo(
	cppTransition : CPPTransition,
	transition : Transition,
	cppSource : CPPState,
	cppTarget : CPPState	
) {
	CPPTransition.commonTransition(cppTransition, transition);
	CPPState.commonState(cppSource, source);
	CPPState.commonState(cppTarget, target);
	Transition.sourceVertex(transition, source);
	Transition.targetVertex(transition, target);
}

pattern cppClassInitState(
	cppClass : CPPClass,
	cppInitState : CPPState,
	initTrans : Transition
) {
	find classStateMachine(_, cppClass, statemachine);
	StateMachine.top.initial(statemachine, initial);
	Transition.sourceVertex(initTrans, initial);
	Transition.targetVertex(initTrans, init);
	CPPState.commonState(cppInitState, init);
}

pattern cppClassFinalStates(
	cppClass : CPPClass,
	cppFinalState : CPPState
) {
	CPPClass.subElements(cppClass, cppFinalState);
	neg find cppTransitionInfo(_, _, cppFinalState, _);
}
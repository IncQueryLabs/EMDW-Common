package com.incquerylabs.emdw.cpp.transformation.queries

import "http://www.eclipse.org/papyrusrt/xtumlrt/common"
import "http://www.eclipse.org/papyrusrt/xtumlrt/xtuml"
import "http://www.ericsson.com/xtumlrt/oopl/cpp"
import "http://www.ericsson.com/xtumlrt/oopl"

/**
 * XTUML queries
 */

pattern xtModelEntities(
	xtModel : Model,
	entity : Entity
) {
	Model.topEntities(xtModel, entity);
} or {
	Model.rootPackages(xtModel, xtPackage);
	XTPackage.entities(xtPackage, entity);
} or {
	Model.rootPackages(xtModel, xtPackage);
	find xtPackageSubPackages+(xtPackage, subPackage);
	XTPackage.entities(subPackage, entity);
}

pattern xtModelXTClasses(
	xtModel : Model,
	xtClass : XTClass
) {
	find xtModelEntities(xtModel, xtClass);
}

pattern xtComponentXTClasses(
	xtComponent : XTComponent,
	xtClass : XTClass
) {
	XTComponent.ownedClasses(xtComponent, xtClass);
}

pattern xtComponentXTPackages(
	xtComponent : XTComponent,
	xtPackage : XTPackage
) {
	XTComponent.packages(xtComponent, xtPackage);
}

pattern xtPackageSubPackages(
	xtPackage : XTPackage,
	subPackage : XTPackage
) {
	XTPackage.packages(xtPackage, subPackage);
}

pattern xtPackageXTComponents(
	xtPackage : XTPackage,
	xtComponent : XTComponent
) {
	XTPackage.entities(xtPackage, xtComponent);
}

pattern xtPackageXTClasses(
	xtPackage : XTPackage,
	xtClass : XTClass
) {
	XTPackage.entities(xtPackage, xtClass);
}

pattern allXTComponentsOfXTComponent(
	xtComponent : XTComponent,
	subComponent : XTComponent
) {
	find xtComponentXTPackages(xtComponent, xtPackage);
	find xtPackageXTComponents(xtPackage, subComponent);
} or {
	find xtComponentXTPackages(xtComponent, xtPackage);
	find xtPackageSubPackages+(xtPackage, xtSubPackage);
	find xtPackageXTComponents(xtSubPackage, subComponent);
}

pattern allXTComponentsOfModel(
	xtModel : Model,
	xtComponent : XTComponent
) {
	Model.topEntities(xtModel, xtComponent);
} or {
	Model.topEntities(xtModel, parent);
	find allXTComponentsOfXTComponent+(parent, xtComponent);
} or {
	Model.rootPackages(xtModel, xtPackage);
	find xtPackageXTComponents(xtPackage, xtComponent);
} or {
	Model.rootPackages(xtModel, parent);
	find xtPackageSubPackages+(parent, xtPackage);
	find xtPackageXTComponents(xtPackage, xtComponent);
} or {
	Model.rootPackages(xtModel, parent);
	find xtPackageSubPackages+(parent, xtPackage);
	find xtPackageXTComponents(xtPackage, component);
	find allXTComponentsOfXTComponent+(component, xtComponent);
} or {
	Model.rootPackages(xtModel, xtPackage);
	find xtPackageXTComponents(xtPackage, parent);
	find allXTComponentsOfXTComponent+(parent, xtComponent);
}

pattern xtComponents(
	xtComponent : XTComponent
) {
	XTComponent(xtComponent);
}

pattern stateMachineStates(
	stateMachine : StateMachine,
	state : State
) {
	StateMachine.top(stateMachine, top);
	find compositeStateSubStates+(top, state);
}

pattern compositeStateSubStates(
	compositeState : CompositeState,
	subState : State
) {
	CompositeState.substates(compositeState, subState);
}

/**
 * CPP Model queries
 */

pattern xtModelToCppModel(
	xtModel : Model,
	cppModel : CPPModel
) {
	CPPModel.commonModel(cppModel, xtModel);
}

pattern cppComponents(
	xtComponent : XTComponent,
	cppComponent : CPPComponent
) {
	CPPComponent.xtComponent(cppComponent, xtComponent);
}

pattern classStateMachine(
	xtClass : XTClass,
	cppClass : CPPClass,
	statemachine : StateMachine
) {
	XTClass.behaviour(xtClass, statemachine);
	CPPClass.xtClass(cppClass, xtClass);
}

pattern classStateMachineStates(
	xtClass : XTClass,
	cppClass : CPPClass,
	state : State
) {
	find classStateMachine(xtClass, cppClass, statemachine);
	find stateMachineStates(statemachine, state);
}

pattern classStateMachineTransitions(
	xtClass : XTClass,
	cppClass : CPPClass,
	transition : Transition
) {
	find classStateMachineStates(xtClass, cppClass, state);
	CompositeState.substates(compState, state);
	CompositeState.transitions(compState, transition);
}

pattern classStateMachineEvents(
	xtClass : XTClass,
	cppClass : CPPClass,
	event : XTEvent
) {
	find classStateMachineTransitions(xtClass, cppClass, transition);
	Transition.triggers(transition, trigger);
	XTEventTrigger.signal(trigger, event);
}
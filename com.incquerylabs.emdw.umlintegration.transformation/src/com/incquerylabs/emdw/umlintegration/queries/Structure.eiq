package com.incquerylabs.emdw.umlintegration.queries

import "http://www.eclipse.org/uml2/5.0.0/UML"

// Package

pattern xtPackage(umlPackage) {
	Package(umlPackage);
	neg find model(umlPackage);
	neg find profile(umlPackage);
}

private pattern model(it) {
	Model(it);
}

private pattern profile(it) {
	Profile(it);
}

pattern xtPackageInModel(model: Model, umlPackage: Package) {
	Model.packagedElement(model, umlPackage);
	find xtPackage(umlPackage);
}

pattern xtPackageInComponent(component: Component, umlPackage: Package) {
	Component.packagedElement(component, umlPackage);
	find xtPackage(umlPackage);
}

pattern xtPackageInPackage(parent: Package, child: Package) {
	Package.packagedElement(parent, child);
	find xtPackage(parent);
	find xtPackage(child);
}

// Component

pattern xtComponent(component: Component) {
	Component(component);
}

pattern xtComponentInModel(model: Model, component: Component) {
	Model.packagedElement(model, component);
	find xtComponent(component);
}

pattern xtComponentInPackage(umlPackage: Package, component: Component) {
	Package.packagedElement(umlPackage, component);
	find xtComponent(component);
	find xtPackage(umlPackage);
}

// Component children

pattern xtPort(component: Component, port: Port) {
	Component.ownedAttribute(component, port);
}

pattern capsulePart(component: Component, property: Property) {
	Component.ownedAttribute(component, property);
	neg find xtPort(component, property);
}

pattern connector(component: Component, connector: Connector) {
	Component.ownedConnector(component, connector);
}

pattern connectorEnd(connector: Connector, connectorEnd: ConnectorEnd) {
	Connector.end(connector, connectorEnd);
}

// Class

pattern xtClass(umlClass: Class) {
	Class(umlClass);
	neg find xtAssociationClass(umlClass);
	neg find behavior(umlClass);
	neg find xtComponent(umlClass);
	neg find node(umlClass);
	neg find stereotype(umlClass);
}

private pattern behavior(it) {
	Behavior(it);
}

private pattern node(it) {
	Node(it);
}

private pattern stereotype(it) {
	Stereotype(it);
}

pattern xtClassInModel(model: Model, umlClass: Class) {
	Model.packagedElement(model, umlClass);
	find xtClass(umlClass);
}

pattern xtClassInPackage(umlPackage: Package, umlClass: Class) {
	Package.packagedElement(umlPackage, umlClass);
	find xtClass(umlClass);
	find xtPackage(umlPackage);
}

pattern xtClassInComponent(component: Component, umlClass: Class) {
	Component.nestedClassifier(component, umlClass);
	find xtClass(umlClass);
}

// Entity children

pattern operation(umlClass: Class, operation: Operation) {
	find entity(umlClass);
	Class.ownedOperation(umlClass, operation);
}

private pattern entity(umlClass: Class) {
	find xtClass(umlClass);
} or {
	find xtComponent(umlClass);
}

pattern attribute(umlClass: Class, property: Property) {
	find xtClass(umlClass);
	Class.ownedAttribute(umlClass, property);
}

// Parameter

pattern parameter(parameter) {
	find parameterInOperation(_, parameter);
}

pattern parameterInOperation(operation: Operation, parameter: Parameter) {
	Operation.ownedParameter(operation, parameter);
	find notReturnParameter(parameter);
}

private pattern notReturnParameter(parameter) {
	Parameter.direction(parameter, direction);
	direction != ParameterDirectionKind::^return;
}

// Relations

pattern xtAssociation(association: Association, sourceEnd: Property, targetEnd: Property) {
	count find associationOwnedEnd(association, _) == 2;
	Association.ownedEnd(association, sourceEnd);
	Association.ownedEnd(association, targetEnd);
	sourceEnd != targetEnd;
}

pattern associationOwnedEnd(association: Association, ownedEnd: Property) {
	Association.ownedEnd(association, ownedEnd);
}

pattern xtAssociationClass(associationClass) {
	AssociationClass(associationClass);
}

pattern xtGeneralization(subClass: Class, generalization: Generalization) {
	Class.generalization(subClass, generalization);
}

// Events

pattern xtClassEvent(umlClass: Class, signal: Signal) {
	Class.nestedClassifier(umlClass, signal);
}

pattern xtSignalEvent(umlClass: Class, signal: Signal) {
	Interface.nestedClassifier(_, signal);

	Class.classifierBehavior(umlClass, stateMachine);
	find transitionInStateMachine(stateMachine, transition);
	Transition.trigger(transition, trigger);
	Trigger.event(trigger, signalEvent);
	SignalEvent.signal(signalEvent, signal);
}

private pattern transitionInStateMachine(stateMachine: StateMachine, transition: Transition) {
	StateMachine.region(stateMachine, toplevelRegion);
	Region.transition(toplevelRegion, transition);
} or {
	StateMachine.region(stateMachine, toplevelRegion);
	find subregion+(toplevelRegion, region);
	Region.transition(region, transition);
}

private pattern subregion(parent: Region, child: Region) {
	Region.subvertex(parent, state);
	State.region(state, child);
}

// Types

pattern typeDefinition(umlPackage: Package, type: Type) {
	find isTypeDefinition(type);
	Package.packagedElement(umlPackage, type);
}

private pattern isTypeDefinition(type: Type) {
	find primitiveType(_, type);
} or {
	find structType(_, type);
}

pattern primitiveType(model: Model, primitiveType: PrimitiveType) {
	find elementInPackage(model, primitiveType);
}

pattern structType(model: Model, structType: DataType) {
	find structMember(structType, _);
	find elementInPackage(model, structType);
}

pattern structMember(structType: DataType, member: Property) {
	DataType.ownedAttribute(structType, member);
}

private pattern elementInPackage(model: Model, packageableElement: PackageableElement) {
	find xtPackageSomewhereInModel(model, umlPackage);
	Package.packagedElement(umlPackage, packageableElement);
}

private pattern xtPackageSomewhereInModel(model: Model, umlPackage: Package) {
	find xtPackageInModel(model, umlPackage);
} or {
	find xtPackageInModel(model, parent);
	find xtPackageInPackage+(parent, umlPackage);
}
package com.incquerylabs.emdw.umlintegration.queries

import "http://www.eclipse.org/uml2/5.0.0/UML"

pattern xtClass(umlPackage: Package, umlClass: Class) {
	Package.packagedElement(umlPackage, umlClass);
	neg find xtComponent(umlClass); // In UML, a Component is also a Class!
}

// Component

pattern xtComponent(component: Component) {
	Component(component);
}

pattern xtComponentInModel(model: Model, component: Component) {
	Model.packagedElement(model, component);
}

pattern xtComponentInPackage(umlPackage: Package, component: Component) {
	Package.packagedElement(umlPackage, component);
	neg find model(umlPackage); // In UML, a Model is also a Package!
}

private pattern model(model: Model) {
	Model(model);
}

// Package

pattern xtPackage(umlPackage: Package) {
	Package(umlPackage);
}

pattern xtPackageInModel(model: Model, umlPackage: Package) {
	Model.packagedElement(model, umlPackage);
}

pattern xtPackageInComponent(component: Component, umlPackage: Package) {
	Component.packagedElement(component, umlPackage);
}

// Events

pattern xtClassEvent(umlClass: Class, signal: Signal) {
	Class.nestedClassifier(umlClass, signal);
}

pattern xtSignalEvent(umlClass: Class, signal: Signal) {
	Interface.nestedClassifier(_, signal);

	Class.classifierBehavior(umlClass, stateMachine);
	find transitionInStateMachine(stateMachine, transition);
	Transition.trigger(transition, trigger);
	Trigger.event(trigger, signalEvent);
	SignalEvent.signal(signalEvent, signal);
}

private pattern transitionInStateMachine(stateMachine: StateMachine, transition: Transition) {
	StateMachine.region(stateMachine, toplevelRegion);
	Region.transition(toplevelRegion, transition);
} or {
	StateMachine.region(stateMachine, toplevelRegion);
	find subregion+(toplevelRegion, region);
	Region.transition(region, transition);
}

private pattern subregion(parent: Region, child: Region) {
	Region.subvertex(parent, state);
	State.region(state, child);
}
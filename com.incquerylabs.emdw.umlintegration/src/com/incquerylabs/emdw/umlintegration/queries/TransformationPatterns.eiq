package com.incquerylabs.emdw.umlintegration.queries

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.zeligsoft.com/xtumlrt/common" as common
import "http://incquerylabs.com/emdw/umlintegration/trace"

pattern rootMapping(rootMapping, umlRoot, xtumlrtRoot) {
	RootMapping.umlRoot(rootMapping, umlRoot);
	RootMapping.xtumlrtRoot(rootMapping, xtumlrtRoot);	
}

pattern trace(rootMapping, trace, umlElement, xtumlrtElement) {
	RootMapping.traces(rootMapping, trace);
	Trace.umlElements(trace, umlElement);
	Trace.xtumlrtElements(trace, xtumlrtElement);
}

pattern behavioredClassifier(umlPackage: uml::Package, behavioredClassifier: BehavioredClassifier) {
	uml::Package.packagedElement(umlPackage, behavioredClassifier);
}

pattern stateMachine(behavioredClassifier: BehavioredClassifier, stateMachine: uml::StateMachine) {
	BehavioredClassifier.classifierBehavior(behavioredClassifier, stateMachine);
}

pattern initialState(initialState: uml::Pseudostate) {
	find toplevelInitialState(_, initialState);
} or {
	find childInitialState(_, initialState);
}

pattern toplevelInitialState(stateMachine: uml::StateMachine, initialState: uml::Pseudostate) {
	uml::StateMachine.region(stateMachine, region);
	find initialStateOfRegion(region, initialState);
}

pattern childInitialState(state: uml::State, initialState: uml::Pseudostate) {
	uml::State.region(state, region);
	find initialStateOfRegion(region, initialState);
}

private pattern initialStateOfRegion(region: Region, initialState: uml::Pseudostate) {
	Region.subvertex(region, initialState);
	uml::Pseudostate.kind(initialState, ::initial);
}

pattern state(state: uml::State) {
	find toplevelState(_, state);
} or {
	find childState(_, state);
}

pattern toplevelState(stateMachine: uml::StateMachine, state: uml::State) {
	uml::StateMachine.region(stateMachine, region);
	Region.subvertex(region, state);
}

pattern childState(parentState: uml::State, state: uml::State) {
	uml::State.region(parentState, region);
	Region.subvertex(region, state);
}

pattern transition(transition: uml::Transition, sourceState: uml::Vertex, targetState: uml::Vertex) {
	find toplevelTransition(_, transition, sourceState, targetState);
} or {
	find childTransition(_, transition, sourceState, targetState);
}

pattern toplevelTransition(stateMachine: uml::StateMachine, transition: uml::Transition, sourceState: uml::Vertex, targetState: uml::Vertex) {
	uml::StateMachine.region(stateMachine, region);
	find transitionOfRegion(region, transition, sourceState, targetState);
}

pattern childTransition(parentState: uml::State, transition: uml::Transition, sourceState: uml::Vertex, targetState: uml::Vertex) {
	uml::State.region(parentState, region);
	find transitionOfRegion(region, transition, sourceState, targetState);
}

private pattern transitionOfRegion(region: Region, transition: uml::Transition, sourceState: uml::Vertex, targetState: uml::Vertex) {
	uml::Region.transition(region, transition);
	Region.subvertex(region, sourceState);
	Region.subvertex(region, targetState);
	uml::Transition.source(transition, sourceState);
	uml::Transition.target(transition, targetState);
}
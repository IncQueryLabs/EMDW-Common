package com.incquerylabs.emdw.cpp.transformation.queries

import "http://www.eclipse.org/papyrusrt/xtumlrt/common"
import "http://www.eclipse.org/papyrusrt/xtumlrt/xtuml"
import "http://www.ericsson.com/xtumlrt/oopl/cpp"
import "http://www.ericsson.com/xtumlrt/oopl"

/**
 * XTUML queries
 */

pattern xtModelEntities(
	xtModel : Model,
	entity : Entity
) {
	Model.entities(xtModel, entity);
} or {
	Model.packages(xtModel, xtPackage);
	Package.entities(xtPackage, entity);
} or {
	Model.packages(xtModel, xtPackage);
	find xtPackageSubPackages+(xtPackage, subPackage);
	Package.entities(subPackage, entity);
}

pattern xtModelXTClasses(
	xtModel : Model,
	xtClass : XTClass
) {
	find xtModelEntities(xtModel, xtClass);
}

pattern xtComponentXTClasses(
	xtComponent : XTComponent,
	xtClass : XTClass
) {
	XTComponent.entities(xtComponent, xtClass);
}

pattern xtComponentXTPackages(
	xtComponent : XTComponent,
	xtPackage : Package
) {
	XTComponent.packages(xtComponent, xtPackage);
}

pattern xtPackageSubPackages(
	xtPackage : Package,
	subPackage : Package
) {
	Package.packages(xtPackage, subPackage);
}

pattern xtPackageXTComponents(
	xtPackage : Package,
	xtComponent : XTComponent
) {
	Package.entities(xtPackage, xtComponent);
}

pattern xtPackageXTClasses(
	xtPackage : Package,
	xtClass : XTClass
) {
	Package.entities(xtPackage, xtClass);
}

pattern allXTComponentsOfXTComponent(
	xtComponent : XTComponent,
	subComponent : XTComponent
) {
	find xtComponentXTPackages(xtComponent, xtPackage);
	find xtPackageXTComponents(xtPackage, subComponent);
} or {
	find xtComponentXTPackages(xtComponent, xtPackage);
	find xtPackageSubPackages+(xtPackage, xtSubPackage);
	find xtPackageXTComponents(xtSubPackage, subComponent);
}

pattern allXTComponentsOfModel(
	xtModel : Model,
	xtComponent : XTComponent
) {
	Model.entities(xtModel, xtComponent);
} or {
	Model.entities(xtModel, parent);
	find allXTComponentsOfXTComponent+(parent, xtComponent);
} or {
	Model.packages(xtModel, xtPackage);
	find xtPackageXTComponents(xtPackage, xtComponent);
} or {
	Model.packages(xtModel, parent);
	find xtPackageSubPackages+(parent, xtPackage);
	find xtPackageXTComponents(xtPackage, xtComponent);
} or {
	Model.packages(xtModel, parent);
	find xtPackageSubPackages+(parent, xtPackage);
	find xtPackageXTComponents(xtPackage, component);
	find allXTComponentsOfXTComponent+(component, xtComponent);
} or {
	Model.packages(xtModel, xtPackage);
	find xtPackageXTComponents(xtPackage, parent);
	find allXTComponentsOfXTComponent+(parent, xtComponent);
}

pattern xtComponents(
	xtComponent : XTComponent
) {
	XTComponent(xtComponent);
}

pattern stateMachineStates(
	stateMachine : StateMachine,
	state : State
) {
	StateMachine.top(stateMachine, top);
	find compositeStateSubStates+(top, state);
}

pattern compositeStateSubStates(
	compositeState : CompositeState,
	subState : State
) {
	CompositeState.substates(compositeState, subState);
}

/**
 * CPP Model queries
 */
 
pattern typeToOOPLType(
	commonType : Type,
	ooplType : OOPLType
) {
	OOPLType.commonType(ooplType, commonType);
}

pattern xtModelToCppModel(
	xtModel : Model,
	cppModel : CPPModel
) {
	CPPModel.commonModel(cppModel, xtModel);
}

pattern cppEntityAttributes(
	xtEntity : Entity,
	cppElement : CPPQualifiedNamedElement,
	attribute : Attribute
) {
	find cppClasses(xtEntity, cppElement);
	Entity.attributes(xtEntity, attribute);
} or {
	find cppComponents(xtEntity, cppElement);
	Entity.attributes(xtEntity, attribute);
}

pattern cppSequenceType(
	typedElement : NamedElement,
	cppSequence : CPPSequence,
	ooplType : OOPLType
) {
	CPPAttribute.unnamedSequenceType(cppAttribute, cppSequence);
	CPPAttribute.commonAttribute(cppAttribute, typedElement);
	Attribute.type(typedElement, type);
	find typeToOOPLType(type, ooplType);
} or {
	CPPFormalParameter.unnamedSequenceType(cppFP, cppSequence);
	CPPFormalParameter.commonParameter(cppFP, typedElement);
	Parameter.type(typedElement, type);
	find typeToOOPLType(type, ooplType);
}

pattern cppEntityOperations(
	xtEntity : Entity,
	cppElement : CPPQualifiedNamedElement,
	operation : Operation
) {
	find cppClasses(xtEntity, cppElement);
	Entity.operations(xtEntity, operation);
} or {
	find cppComponents(xtEntity, cppElement);
	Entity.operations(xtEntity, operation);
}

pattern cppComponents(
	xtComponent : XTComponent,
	cppComponent : CPPComponent
) {
	CPPComponent.xtComponent(cppComponent, xtComponent);
}

pattern cppPackages(
	xtPackage : Package,
	cppPackage : CPPPackage
) {
	CPPPackage.commonPackage(cppPackage, xtPackage);
}

pattern cppComponentClasses(
	xtComponent : XTComponent,
	cppComponent : CPPComponent,
	xtClass : XTClass
){
	find cppComponents(xtComponent, cppComponent);
	XTComponent.entities(xtComponent, xtClass);
}

pattern cppComponentPackages(
	xtComponent : XTComponent,
	cppComponent : CPPComponent,
	xtPackage : Package
) {
	find cppComponents(xtComponent, cppComponent);
	find xtComponentXTPackages(xtComponent,xtPackage);
}

pattern cppPackageClasses(
	xtPackage : Package,
	cppPackage : CPPPackage,
	xtClass : XTClass
){
	find cppPackages(xtPackage, cppPackage);
	find xtPackageXTClasses(xtPackage, xtClass);
}

pattern cppPackagesInPackages(
	xtParentPackage : Package,
	cppParentPackage : CPPPackage,
	xtPackage : Package 
) {
	find cppPackages(xtParentPackage, cppParentPackage);
	neg find cppPackages(xtPackage, _);
	find xtPackageSubPackages(xtParentPackage, xtPackage);
}

pattern cppClasses(
	xtClass : XTClass,
	cppClass : CPPClass
) {
	CPPClass.xtClass(cppClass, xtClass);
}

pattern cppClassStateMachine(
	xtClass : XTClass,
	cppClass : CPPClass,
	statemachine : StateMachine
) {
	XTClass.behaviour(xtClass, statemachine);
	find cppClasses(xtClass, cppClass);
}

pattern cppClassStateMachineStates(
	xtClass : XTClass,
	cppClass : CPPClass,
	state : State
) {
	find cppClassStateMachine(xtClass, cppClass, statemachine);
	find stateMachineStates(statemachine, state);
}

pattern cppClassStateMachineTransitions(
	xtClass : XTClass,
	cppClass : CPPClass,
	transition : Transition
) {
	find cppClassStateMachineStates(xtClass, cppClass, state);
	CompositeState.substates(compState, state);
	CompositeState.transitions(compState, transition);
}

pattern cppClassStateMachineEvents(
	xtClass : XTClass,
	cppClass : CPPClass,
	event : XTEvent
) {
	find cppClassStateMachineTransitions(xtClass, cppClass, transition);
	Transition.triggers(transition, trigger);
	XTEventTrigger.signal(trigger, event);
}

pattern cppClassAssociations(
	xtClass: XTClass,
	cppClass: CPPClass,
	cppTargetClass: CPPClass,
	association: XTAssociation
) {
	find cppClasses(xtClass, cppClass);
	XTClass.relations(xtClass, association);
	XTAssociation.target(association, xtTargetClass);
	find cppClasses(xtTargetClass, cppTargetClass);
}
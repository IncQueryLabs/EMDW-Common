package com.incquerylabs.emdw.umlintegration.queries

import "http://www.eclipse.org/uml2/5.0.0/UML"

pattern signals(sig : Signal) {
    Signal(sig);
}

pattern umlTypes(type : Type) {
    Type(type);
}

pattern umlTypesInNamespace(type : Type, namespace : Namespace, name) {
    Type.qualifiedName(type, name);
    Namespace.member(namespace, type);
}

pattern superClass(sub : Class, sup : Class) {
    find xtGeneralization(sub, gen);
    Generalization.target(gen, sup);
}

pattern superSignal(sub : Signal, sup : Signal) {
    Generalization.specific(gen, sub);
    Generalization.general(gen, sup);
}

pattern superDataType(sub : DataType, sup : DataType) {
    Generalization.specific(gen, sub);
    Generalization.general(gen, sup);
}

pattern attributesOfClassifier(cl : Classifier, attribute : Property) {
    Class.ownedAttribute(cl, attribute);
} or {
    find superClass+(cl, sup);
    Class.ownedAttribute(sup, attribute);
} or {
    Signal.ownedAttribute(cl, attribute);
} or {
    find superSignal+(cl, sup);
    Signal.ownedAttribute(sup, attribute);
}

pattern associationsOfClassifier(cl : Classifier, association : Property) {
    find xtAssociation(_, sourceEnd, association);
    Property.type(sourceEnd, cl);
} or {
    find superClass+(cl, sup);
    find xtAssociation(_, sourceEnd, association);
    Property.type(sourceEnd, sup);
}

pattern operationsOfClass(cl : Classifier, op : Operation) {
    find operation(cl, op);
} or {
    DataType(cl);    
    DataType.ownedOperation(cl, op);
} or {
    find superClass+(cl, sup);
    find operation(sup, op);
} or {
    find superDataType+(cl, sup);
    DataType.ownedOperation(sup, op);
}

pattern staticOperations(op : Operation) {
    find operation(_, op);
    Operation.isStatic(op, true);
}

pattern triggerSignalOfBehavior(behavior, signal : Signal) {
    OpaqueBehavior(behavior);
    find stateEntryBehavior(state, behavior);
    find transition(transition, _, state);
    find xtEventTrigger(transition, trigger);
    find triggerSignal(trigger, signal);
} or {
    OpaqueExpression(behavior);
    find transition(transition, _, _);
    Transition.guard.specification(transition, behavior);
    find xtEventTrigger(transition, trigger);
    find triggerSignal(trigger, signal);
}
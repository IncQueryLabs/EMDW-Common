/*****************************************************************************
 * Copyright (c) 2013, 2014 CEA LIST.
 *
 *    
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *  IJI - Initial implementation
 * 
 *****************************************************************************/
grammar com.incquerylabs.uml.ralf.ReducedAlfLanguage hidden (WS, ML_COMMENT, SL_COMMENT)

generate reducedAlfLanguage "http://www.incquerylabs.com/uml/ralf/ReducedAlfLanguage"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/uml2/5.0.0/UML" as uml

/**
 * TOP LEVEL ELEMENT
 */
Statements :
    ( statement += Statement )*
;

/***************
* NAMES        *
***************/
Name :
  ID | UNRESTRICTED_NAME
;

QualifiedName :
    Name ( '::' Name )*
;

NameBinding : 
    name = Name  
;

/***************
* EXPRESSIONS *
***************/
Expression :
  AssignmentExpression | ConditionalExpression
;

/* PRIMARY EXPRESSIONS */

PrimaryExpression returns Expression :
  BaseExpression
    // CHANGE: Made FeatureReference and ExtentOrExpression subtypes of Expression.
  ( {FeatureReference.expression = current} '.' nameBinding = NameBinding {FeatureInvocationExpression.target = current} tuple = Tuple |
    {FeatureReference.expression = current} '.' property = [uml::Property|Name] {PropertyAccessExpression.featureReference = current} | 
//    {ExtentOrExpression.nonNameExpression = current} '->' 
//      ( {SequenceOperationExpression.primary = current} operation = [uml::Operation|QualifiedName] tuple = Tuple
//      // CHANGE: Made SequenceExpansionExpression concrete.
//      | {SequenceExpansionExpression.primary = current} operation = ID variable = Name '(' argument = Expression ')'
//      ) | 
    {SequenceAccessExpression.primary = current} index = Index
  )*
;

BaseExpression returns Expression : 
    LiteralExpression |
    ThisExpression |
    SuperInvocationExpression |
    InstanceCreationOrSequenceConstructionExpression |
    ClassExtentExpression |
    LinkOperationExpression |
    SequenceConstructionExpression |
//  SequenceOperationOrReductionOrExpansionExpression |
    BehaviorInvocationExpression |
    NameExpression |
    ParenthesizedExpression
;

/* LITERAL EXPRESSIONS */
LiteralExpression returns LiteralExpression :
    BooleanLiteralExpression |
    NaturalLiteralExpression |
    RealLiteralExpression |
    UnboundedLiteralExpression |
    StringLiteralExpression
;

BooleanLiteralExpression :
    value = BOOLEAN_VALUE
;

NaturalLiteralExpression :
    value = NATURAL_VALUE
;

RealLiteralExpression :
    value = REAL_VALUE
;

UnboundedLiteralExpression :
    {UnboundedLiteralExpression} value = '*'
;

StringLiteralExpression :
    value = STRING
;

/* Name EXPRESSIONS */
NameExpression :
    reference = [Variable|QualifiedName]
;

/* THIS EXPRESSIONS */
ThisExpression returns Expression : 
    {FeatureInvocationExpression} 'this' tuple = Tuple | 
    {ThisExpression} 'this'
;

/* PARENTHESIZED EXPRESSIONS */
ParenthesizedExpression returns Expression : 
    '(' Expression ')'
;

/* PROPERTY ACCESS EXPRESSIONS */
//FeatureReference :
//  expression = PrimaryExpression // '.' nameBinding = NameBinding
//;

//FeatureTargetExpression returns Expression :
//  NonNamePrimaryExpression | NameTargetExpression
//;
//
//NameTargetExpression returns NameExpression :
//  name = ColonQualifiedName
//;

/* INVOCATION EXPRESSIONS */

BehaviorInvocationExpression :
  target = [uml::Behavior|QualifiedName] tuple = Tuple
;

Tuple : 
    /* {Tuple}'(' ( namedTupleExpressionList = NamedTupleExpressionList | ( positionalTupleExpressionList = PositionalTupleExpressionList )? ) ')' */
    {PositionalTuple} '(' ')'
    |
    '(' ( NamedTupleExpressionList | PositionalTupleExpressionList ) ')'
;

PositionalTupleExpressionList returns PositionalTuple :
    {PositionalTuple} ( expression += Expression (',' expression += Expression)* )?
;

NamedTupleExpressionList returns NamedTuple : 
    namedExpression += NamedExpression ( ',' namedExpression += NamedExpression )*
;

NamedExpression : 
    name = Name '=>' expression = Expression
;

SuperInvocationExpression :
    'super' ( '.' target = [uml::Operation|QualifiedName])? tuple = Tuple
;

/* INSTANCE CREATION EXPRESSIONS */
InstanceCreationOrSequenceConstructionExpression returns Expression : 
    {InstanceCreationExpression} 'new' instance = [uml::Classifier|QualifiedName] tuple = Tuple
;

/* LINK OPERATION EXPRESSIONS */
LinkOperationExpression :
  associationName = QualifiedName '.' operation = LinkOperation tuple = LinkOperationTuple
;

LinkOperation :
'createLink' | 'destroyLink' | 'clearAssoc'
;

LinkOperationTuple returns Tuple :
'(' ( IndexedNamedTupleExpressionList | PositionalTupleExpressionList ) ')'
;

IndexedNamedTupleExpressionList returns NamedTuple :
  namedExpression += IndexedNamedExpression (',' namedExpression += IndexedNamedExpression )*
;

IndexedNamedExpression returns NamedExpression : 
    name = Name ( index = Index )? '=>' expression = Expression
;

/* CLASS EXTENT EXPRESSIONS */
ClassExtentExpression :
  class = [uml::Class|QualifiedName] '::' 'instances' '(' ')'
;

/* SEQUENCE CONSTRUCTION EXPRESSIONS */

SequenceConstructionExpression :
  // CHANGE: Added isAny attribute to SequenceConstructionExpression in order to allow Xtext serialization.
  ( isAny ?= 'any' | typeName = QualifiedName ) ( hasMultiplicity ?= MultiplicityIndicator )? '{' ( elements = SequenceElements )? '}' |
  hasMultiplicity ?= 'null'
;

MultiplicityIndicator : 
    '[' ']'
;

SequenceElements : 
  SequenceRange | 
  SequenceExpressionList
;

SequenceRange :
  rangeLower = Expression '..' rangeUpper = Expression
;

SequenceExpressionList :
  element += SequenceElement ( ',' element += SequenceElement )* ( ',' )?
;

SequenceElement returns Expression : 
    Expression | SequenceInitializationExpression
;

SequenceInitializationExpression returns SequenceConstructionExpression : 
    'new'? '{' elements = SequenceElements '}'
;

/* SEQUENCE ACCESS EXPRESSIONS */
Index returns Expression : 
    '[' Expression ']'
;

/* SEQUENCE OPERATION, REDUCTION AND EXPANSION EXPRESSIONS */
// NOTE: This only covers the case when the primary is a class extent shorthand.
//SequenceOperationOrReductionOrExpansionExpression returns Expression :
//  {ExtentOrExpression} name = /*PotentiallyAmbiguous*/QualifiedName '->' 
//    ( {SequenceOperationExpression.primary = current} operation = [uml::Operation|QualifiedName] tuple = Tuple 
//    // CHANGE: Made SequenceExpansionExpression concrete.
//    | {SequenceExpansionExpression.primary = current} operation = ID variable = Name '(' argument = Expression ')'
//    )
//;
    
/* INCREMENT OR DECREMENT EXPRESSIONS */
PrefixExpression returns Expression : 
  // CHANGE: Added operator to IncrementOrDecrementExpression in the metamodel.
    {PrefixExpression}
    operator = AffixOperator operand = LeftHandSide
;

AffixOperator :
    '++' | '--'
;

/* UNARY EXPRESSIONS */
UnaryExpression returns Expression :
  PostfixOrCastExpression | NonPostfixNonCastUnaryExpression
;

PostfixOrCastExpression returns Expression :
  PostfixExpression | CastExpression | PrimaryExpression
;

PostfixExpression returns Expression :
  {PostfixExpression}
  operand = LeftHandSide operator = AffixOperator
;

NonPostfixNonCastUnaryExpression returns Expression : 
    PrefixExpression | 
    NumericUnaryExpression | 
    BooleanUnaryExpression  | 
    BitStringUnaryExpression    | 
    IsolationExpression
;

BooleanUnaryExpression : 
    operator = '!' operand = UnaryExpression
;

BitStringUnaryExpression : 
    operator = '~' operand = UnaryExpression
;

NumericUnaryExpression : 
    operator = NumericUnaryOperator operand = UnaryExpression
;

NumericUnaryOperator : 
    '+' | '-'
;

IsolationExpression : 
    operator='$' operand = UnaryExpression
;

CastExpression : 
  // CHANGE: Added isAny attribute to CastExpression in order to allow Xtext serialization.
  '(' ( isAny ?= 'any' | typeName = QualifiedName ) ')' operand = CastCompletion
;

CastCompletion returns Expression : 
    PostfixOrCastExpression | 
    BooleanUnaryExpression  | 
    BitStringUnaryExpression    | 
    IsolationExpression
;

/* ARITHMETIC EXPRESSIONS */
MultiplicativeExpression returns Expression : 
    UnaryExpression 
    ( {ArithmeticExpression.operand1 = current} operator = MultiplicativeOperator operand2 = UnaryExpression )*
;

MultiplicativeOperator : 
    '*' | '/' | '%'
;

AdditiveExpression returns Expression : 
    MultiplicativeExpression
    ( {ArithmeticExpression.operand1 = current} operator = AdditiveOperator operand2 = MultiplicativeExpression )*
;

AdditiveOperator : 
    '+' | '-'
;

/* SHIFT EXPRESSIONS */

ShiftExpression returns Expression : 
    AdditiveExpression
    ( {ShiftExpression.operand1 = current} operator = ShiftOperator operand2 = AdditiveExpression )*
;

ShiftOperator : 
    '<<' | '>>' | '>>>'
;

/* RELATIONAL EXPRESSIONS */
RelationalExpression returns Expression :
    ShiftExpression 
    ( {RelationalExpression.operand1 = current} operator = RelationalOperator operand2 = ShiftExpression )?
;

RelationalOperator : 
    '<' | '>' | '<=' | '>='
;

/* CLASSIFICATION EXPRESSIONS */
ClassificationExpression returns Expression : 
    RelationalExpression 
  ( {ClassificationExpression.operand = current} operator = ClassificationOperator type = [uml::Class|QualifiedName] )?
;

ClassificationOperator : 
    'instanceof' | 'hastype'
;

/* EQUALITY EXPRESSIONS */
EqualityExpression returns Expression : 
    ClassificationExpression 
  ( {EqualityExpression.operand1 = current} operator = EqualityOperator operand2 = ClassificationExpression )*
;

EqualityOperator : 
    '==' | '!='
;

/* LOGICAL EXPRESSIONS */
AndExpression returns Expression : 
    EqualityExpression 
  ( {LogicalExpression.operand1 = current} operator = '&' operand2 = EqualityExpression )*
;

ExclusiveOrExpression returns Expression :
  AndExpression
  ( {LogicalExpression.operand1 = current} operator = '^' operand2 = AndExpression )*
;

InclusiveOrExpression returns Expression : 
    ExclusiveOrExpression
    ( {LogicalExpression.operand1 = current} operator = '|' operand2 = ExclusiveOrExpression )*
;

/* CONDITIONAL LOGICAL EXPRESSIONS */
ConditionalAndExpression returns Expression : 
    InclusiveOrExpression
    ( {ConditionalLogicalExpression.operand1 = current} operator = '&&' operand2 = InclusiveOrExpression )*
;

ConditionalOrExpression returns Expression :
    ConditionalAndExpression
    ( {ConditionalLogicalExpression.operand1 = current} operator = '||' operand2 = ConditionalAndExpression )*
;

/* CONDITIONAL-TEST EXPRESSIONS */
ConditionalExpression returns Expression : 
    ConditionalOrExpression
  ( {ConditionalTestExpression.operand1 = current} 
    '?' operand2 = Expression ':' operand3 = ConditionalExpression 
  )?
;

/* ASSIGNMENT EXPRESSIONS */
AssignmentExpression returns AssignmentExpression :
  leftHandSide = LeftHandSide operator = AssignmentOperator rightHandSide = Expression
;

LeftHandSide :
  NameLeftHandSide | 
  FeatureLeftHandSide // ( index = Index )? |
//  "(" LeftHandSide ")"
;

NameLeftHandSide :
  // CHANGE: Moved the index property from LeftHandSide down to just NameLeftHandSide.
  target = [Variable|QualifiedName] ( index = Index )? 
;

FeatureLeftHandSide :
  // CHANGE: Replaced the feature property of a FeatureLeftHandSide with expression.
  expression = PrimaryExpression
;

AssignmentOperator : 
    '=' | '+=' | '-='   | '*='| '/=' | '%=' | '&=' | '|='   | '^=' | '<<=' | '>>=' | '>>>=' ;

/**************
 * STATEMENTS *
 **************/
Statement : 
    BlockStatement |
    EmptyStatement |
    LocalNameDeclarationStatement |
    ExpressionStatement |
    IfStatement |
    SwitchStatement |
    WhileStatement |
    ForStatement |
    DoStatement |
    BreakStatement |
    ReturnStatement |
    ClassifyStatement |
    SendSignalStatement
;

/* BLOCK */
Block : 
    {Block} '{' ( statement += Statement )* '}'
;

/* BLOCK STATEMENTS */
BlockStatement :
    Block
;

/* EMPTY STATEMENTS */
EmptyStatement :
  {EmptyStatement}
    ';'
;

VariableDeclaration returns Variable: 
   ( isAny ?= 'any' | type = [uml::Type|QualifiedName] ) hasMultiplicity ?= MultiplicityIndicator? name = Name     
;

/* LOCAL NAME DECLARATION STATEMENTS */
LocalNameDeclarationStatement : 
    variable = VariableDeclaration '=' expression = InitializationExpression ';'
;

InitializationExpression returns Expression :
    Expression
| SequenceInitializationExpression
| InstanceInitializationExpression
;

InstanceInitializationExpression returns InstanceCreationExpression : 
    'new' tuple = Tuple
;

/* EXPRESSION STATEMENTS */
ExpressionStatement :
  expression = Expression ';'
;

/* IF STATEMENTS */
IfStatement : 
    'if' nonFinalClauses += ConcurrentClauses ( 'else' 'if' nonFinalClauses += ConcurrentClauses )*
    ( 'else' finalClause = Block )?
;

ConcurrentClauses : 
    clause += NonFinalClause ( 'or' 'if' clause += NonFinalClause )*
;

NonFinalClause : 
    '(' condition = Expression ')' body = Block
;

/* SWITCH STATEMENTS */
SwitchStatement : 
    'switch' '(' expression = Expression ')'
    '{' ( nonDefaultClause += SwitchClause )*
    ( defaultClause = SwitchDefaultClause )? '}'
;

SwitchClause :
    case += SwitchCase ( case += SwitchCase )*
    block = NonEmptyStatementSequence
;

SwitchCase returns Expression : 
    'case' Expression ':'
;

SwitchDefaultClause returns Block : 
    'default' ':' NonEmptyStatementSequence
;

NonEmptyStatementSequence returns Block : 
    ( statement += Statement )+
;

/* WHILE STATEMENTS */
WhileStatement : 
    'while' '(' condition = Expression ')' body = Block
;

/* DO STATEMENTS */
DoStatement : 
    'do' body = Block 'while' '(' condition = Expression ')' ';'
;

/* FOR STATEMENTS */
ForStatement : 
    'for' '(' variableDefinition += LoopVariableDefinition ( ',' variableDefinition += LoopVariableDefinition )* ')' 
    body = Block
;

LoopVariableDefinition returns Variable: 
  // CHANGE: Added isAny attribute to LoopVariableDefinition in order to allow Xtext serialization.
  // NOTE: Default for typeIsInferred must be false.
     {LoopVariable} 
       (name = Name | ( isAny ?= 'any' | typeName = QualifiedName ) name = Name)
       typeIsInferred ?= 'in' expression1 = Expression ( '..' expression2 = Expression )? |
     {LoopVariable} 
       (name = Name | ( isAny ?= 'any' | typeName = QualifiedName ) name = Name)
       ':' expression1 = Expression
;

/* BREAK STATEMENTS */
BreakStatement : 
    {BreakStatement} 
    'break' ';'
;

/* RETURN STATEMENTS */
ReturnStatement : 
    {ReturnStatement}
    'return' ( expression = Expression )? ';'
;

/* CLASSIFY STATEMENTS */
ClassifyStatement :
    'classify' expression = Expression 
   (
     fromList = ClassificationFromClause ( toList = ClassificationToClause )? |
     ( isReclassifyAll ?= ReclassifyAllClause )? toList = ClassificationToClause
   )
   ';'
;

ClassificationFromClause returns QualifiedNameList :
    'from' QualifiedNameList
;

ClassificationToClause returns QualifiedNameList : 
    'to' QualifiedNameList
;

ReclassifyAllClause : 
    'from' '*'
;

QualifiedNameList : 
    name += QualifiedName ( ',' name += QualifiedName )*
;

/****************
* Send statement
*****************/
SendSignalStatement:
    {SendSignalStatement}
    'send' signal = Expression '=>' target = Expression
;


/****************
* Terminals
*****************/
terminal BOOLEAN_VALUE : 'true' | 'false' ;

terminal NATURAL_VALUE :
    ('0' | '1'..'9' (('_')? '0'..'9')*) | //DECIMAL 
    (('0b' | '0B') '0'..'1' (('_')? '0'..'1')*) | // BINARY
    (('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')  (('_')? ('0'..'9'|'a'..'f'|'A'..'F'))*) | // HEX
    ('0' ('_')? '0'..'7' (('_')? '0'..'7')*) // OCT
;

terminal REAL_VALUE:
    ('0' | '1'..'9' (('_')? '0'..'9')*) '.' '0'..'9' (('_')? '0'..'9')*
;

terminal ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ;
terminal UNRESTRICTED_NAME : '\'' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'\'') )* '\'' ;

terminal STRING : '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' ;

terminal ML_COMMENT : '/*' !('*' | '@') -> '*/';
terminal SL_COMMENT : '//' (!('@'|'\n'|'\r') !('\n'|'\r')*)? ('\r'? '\n')?;

terminal WS : (' '|'\t'|'\r'|'\n')+;

system com.incquerylabs.uml.ralf.ReducedAlfSystem

validatorExtends AbstractReducedAlfLanguageValidator

import com.incquerylabs.uml.ralf.reducedAlfLanguage.ArithmeticExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.AssignmentExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.AssociationAccessExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.BooleanLiteralExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.BooleanUnaryExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.CastExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.ClassExtentExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.ConditionalLogicalExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.ConditionalTestExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.DoStatement
import com.incquerylabs.uml.ralf.reducedAlfLanguage.ElementCollectionExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.EqualityExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.Expression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.ExpressionList
import com.incquerylabs.uml.ralf.reducedAlfLanguage.FeatureInvocationExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.FilterExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.FilterVariable
import com.incquerylabs.uml.ralf.reducedAlfLanguage.ForEachStatement
import com.incquerylabs.uml.ralf.reducedAlfLanguage.ForStatement
import com.incquerylabs.uml.ralf.reducedAlfLanguage.IfClause
import com.incquerylabs.uml.ralf.reducedAlfLanguage.InstanceCreationExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.InstanceDeletionExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.LeftHandSide
import com.incquerylabs.uml.ralf.reducedAlfLanguage.LinkOperation
import com.incquerylabs.uml.ralf.reducedAlfLanguage.LinkOperationExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.LocalNameDeclarationStatement
import com.incquerylabs.uml.ralf.reducedAlfLanguage.LogicalExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.LoopVariable
import com.incquerylabs.uml.ralf.reducedAlfLanguage.NameExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.NamedTuple
import com.incquerylabs.uml.ralf.reducedAlfLanguage.NaturalLiteralExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.NullExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.NumericUnaryExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.PostfixExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.PrefixExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.RealLiteralExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.RelationalExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.ReturnStatement
import com.incquerylabs.uml.ralf.reducedAlfLanguage.SendSignalStatement
import com.incquerylabs.uml.ralf.reducedAlfLanguage.ShiftExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.SignalDataExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.StaticFeatureInvocationExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.StringLiteralExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.SwitchClause
import com.incquerylabs.uml.ralf.reducedAlfLanguage.SwitchStatement
import com.incquerylabs.uml.ralf.reducedAlfLanguage.ThisExpression
import com.incquerylabs.uml.ralf.reducedAlfLanguage.Tuple
import com.incquerylabs.uml.ralf.reducedAlfLanguage.TypeDeclaration
import com.incquerylabs.uml.ralf.reducedAlfLanguage.Variable
import com.incquerylabs.uml.ralf.reducedAlfLanguage.WhileStatement
import com.incquerylabs.uml.ralf.scoping.IUMLContextProvider
import com.incquerylabs.uml.ralf.scoping.UMLScopeHelper
import com.incquerylabs.uml.ralf.types.AbstractTypeReference
import com.incquerylabs.uml.ralf.types.CollectionTypeReference
import com.incquerylabs.uml.ralf.types.IUMLTypeReference
import com.incquerylabs.uml.ralf.types.IUMLTypeReference.AnyTypeReference
import com.incquerylabs.uml.ralf.types.IUMLTypeReference.NullTypeReference
import com.incquerylabs.uml.ralf.types.TypeFactory
import com.incquerylabs.uml.ralf.types.UMLTypeReference
import com.incquerylabs.uml.ralf.validation.AbstractReducedAlfLanguageValidator
import org.eclipse.emf.ecore.EObject
import org.eclipse.uml2.uml.Association
import org.eclipse.uml2.uml.Class
import org.eclipse.uml2.uml.Classifier
import org.eclipse.uml2.uml.Operation
import org.eclipse.uml2.uml.Parameter
import org.eclipse.uml2.uml.PrimitiveType
import org.eclipse.uml2.uml.Property
import org.eclipse.uml2.uml.Signal
import org.eclipse.uml2.uml.Type
import com.incquerylabs.uml.ralf.scoping.OperationCandidateChecker
import java.util.Set
import com.incquerylabs.uml.ralf.reducedAlfLanguage.CollectionVariable
import com.incquerylabs.uml.ralf.reducedAlfLanguage.ReducedAlfLanguagePackage
import org.eclipse.uml2.uml.UMLPackage
import it.xsemantics.runtime.RuleEnvironment

inject extension TypeFactory typeFactory
inject extension UMLScopeHelper scopeHelper
inject extension OperationCandidateChecker candidateChecker
val extension UMLPackage umlPackage = UMLPackage::eINSTANCE
val extension ReducedAlfLanguagePackage ralfPackage = ReducedAlfLanguagePackage::eINSTANCE

val REAL    = IUMLContextProvider.REAL_TYPE
val INTEGER = IUMLContextProvider.INTEGER_TYPE
val BOOLEAN = IUMLContextProvider.BOOLEAN_TYPE
val STRING  = IUMLContextProvider.STRING_TYPE

auxiliary {
    typeReference(TypeDeclaration decl) : IUMLTypeReference
    constructorOperationCandidates(Classifier cl, Tuple parameters) : Set<Operation>
    constructorOperation(Classifier cl, Tuple parameters) : Operation
    replaceGenericTypeReference(RuleEnvironment G, IUMLTypeReference ref, EObject ctx) : IUMLTypeReference
}

judgments {
    type |- EObject expression : output IUMLTypeReference cached
        error "Cannot type " + stringRep(expression)
        source expression
    operationParametersType |- Operation op <: Tuple params <: EObject ctx
        error "Invalid parameter types " + stringRep(op)
        source params
    operationType |- Operation op <: Tuple params <: EObject ctx :> output IUMLTypeReference
        error "Invalid parameter types " + stringRep(op)
        source op
    subtypeReference |- IUMLTypeReference left <: IUMLTypeReference right : IUMLContextProvider context
        error stringRep(left) + " is not a subtype of  " + stringRep(right)
    subtypeOrEqual |- Type left <~ Type right : IUMLContextProvider context cached
        error stringRep(left) + " is not a subtype of  " + stringRep(right)
    assignable |- Expression expression |> IUMLTypeReference target
        error stringRep(expression) + " is not assignable for type " + stringRep(target)
        source expression        
}

auxiliary typeReference(TypeDeclaration decl) {
    if (decl.getType == null) {
        anyType
    } else {
        decl.getType().typeReference        
    }
}

auxiliary constructorOperationCandidates(Class cl, Tuple parameters) {
    umlContext(parameters).getConstructorsOfClass(cl)
}

auxiliary constructorOperationCandidates(Signal sig, Tuple parameters) {
   newHashSet(sig.createVirtualConstructor)
}

auxiliary constructorOperation(Classifier cl, Tuple parameters) {
    val candidates = cl.constructorOperationCandidates(parameters).calculateBestCandidates(parameters, cl)
    
    if (candidates.size == 1) {
        return candidates.get(0)
    } else {
        return null
    }
}

auxiliary replaceGenericTypeReference(RuleEnvironment G, IUMLTypeReference ref, EObject ctx) {
    if (ref instanceof UMLTypeReference && ref.umlType != null && ref.umlType == ctx.umlContext.genericCollectionParameterType) {
        G |- ctx : var CollectionTypeReference collType
        collType.valueType
    } else {
        ref
    }
}

axiom BooleanLiteral
    G |- BooleanLiteralExpression bool :
        BOOLEAN.primitiveTypeReference(bool.umlContext)
        
axiom NaturalLiteral
    G |- NaturalLiteralExpression natural :
        INTEGER.primitiveTypeReference(natural.umlContext)
        
axiom RealLiteral
    G |- RealLiteralExpression real :
        REAL.primitiveTypeReference(real.umlContext)
        
axiom StringLiteral
    G |- StringLiteralExpression string :
        STRING.primitiveTypeReference(string.umlContext)

axiom NullLiteral
    G |- NullExpression ex : nullType

/**
 * Variable declarations
 */
rule TypeDeclaration
    G |- TypeDeclaration typeDecl: IUMLTypeReference result
        
from {
    result = typeDecl.typeReference
}


rule VariableDeclaration
    derives G |- Variable variable : IUMLTypeReference result
from {
      result = variable.type.typeReference
}

rule CollectionVariableDeclaration
    derives G |- CollectionVariable variable : IUMLTypeReference result
from {
    result = switch(variable.collectionType) {
        case BAG:
            variable.type.typeReference.bagOf
        case SET:
            variable.type.typeReference.setOf
        case SEQUENCE:
            variable.type.typeReference.sequenceOf
    }
}

rule LoopVariable
    derives G |- LoopVariable variable : IUMLTypeReference result
from {
    if (variable.type != null) {
        result = variable.type.typeReference
    } else {
        //These loop variables are expected to be in a foreach statement
        val st = variable.eContainer as ForEachStatement
        G |- st.expression : var CollectionTypeReference collectionType
        result = collectionType.valueType
    }
}

rule FilterVariable
    derives G |- FilterVariable variable : IUMLTypeReference result
from {
    if (variable.type != null) {
        result = variable.type.typeReference
    }else{
    	var filterExp = variable.eContainer as FilterExpression
    	G |- filterExp.context : var CollectionTypeReference contextType
    	result = contextType.valueType
    } 
}

rule Parameter
    derives G |- Parameter parameter : IUMLTypeReference result
from {
    result = parameter.typeOf
}

rule Type
    derives G |- Type type : IUMLTypeReference result
from {
    result = type.typeReference
}

rule Property
    derives G |- Property property : IUMLTypeReference result
from {
     !property.eIsProxy
     result = property.typeOf
}
/**
 * Subtyping and assignability
 */  

axiom NullSubtyping
  G |- UMLTypeReference left <: NullTypeReference right : IUMLContextProvider context
  
axiom AnySubtyping
  G |- AnyTypeReference left <: IUMLTypeReference right : IUMLContextProvider context

rule GeneralReferenceSubtyping 
    derives G |- IUMLTypeReference left <: IUMLTypeReference right : IUMLContextProvider context
    error "The type " + stringRep(left) + " is not compatible with the type " + stringRep(right)
from {
    //More specific cases are not matched, fail here
    fail
} 

rule SimpleTypeReferenceSubtyping
    derives G |- AbstractTypeReference left <: AbstractTypeReference right : IUMLContextProvider context
from {
    G |- left.umlType <~ right.umlType : context
}

rule CollectionSubtyping
    derives G |- CollectionTypeReference left <: CollectionTypeReference right : IUMLContextProvider context
from {
    left.type == right.type
    G |- left.valueType <:  right.valueType : context
}

rule GeneralSubtyping
    derives G |- Type left <~ Type right : IUMLContextProvider context
    error "The type " + stringRep(left) + " is not compatible with the type " + stringRep(right)
from {
    //More specific cases are not matched, fail here
    fail
}  

rule PrimitiveSubtyping
    derives G |- PrimitiveType left <~ PrimitiveType right : IUMLContextProvider context
from {
    {
        left == right
    } or {
        left == context.getPrimitiveType(REAL)
        right == context.getPrimitiveType(INTEGER)
    }
}

rule EqualsClassifierSubtyping
    derives G |- Classifier left <~ Classifier right : IUMLContextProvider context
from {
    left == right
}

rule ClassSubtyping
    derives G |- Class left <~ Class right : IUMLContextProvider context
from {
    left == right
    or
    right.name == "Object"
    or
    right.superClasses.contains(left)
} 

rule ExpressionAssignableToType
    G |- Expression ex |> IUMLTypeReference target
from {
    G |- ex : var IUMLTypeReference expressionType
    G |- expressionType <: target : ex.umlContext 
}

/**
 * Operation typing
 */
rule OperationTyping
    G |- Operation op <: Tuple params <: EObject ctx
from {
    fail
}
rule OperationTypingWithResult
    G |- Operation op <: Tuple params <: EObject ctx :> IUMLTypeReference result
from {
    G |- op <: params <: ctx
    G |- op : result
}
rule ParameterListTyping
    derives G |- Operation op <: ExpressionList params <: EObject ctx
from {
    val declaredParameters = op.parameters
    
    val opParamLength = declaredParameters.size
    val paramLength = params.expressions.size
    opParamLength == paramLength
    
    for (var i = 0; i < paramLength; i++) {
        val declaredType = replaceGenericTypeReference(G, declaredParameters.get(i).type.typeReference, ctx)
        G |- params.expressions.get(i) |> declaredType
    }
}

rule NamedTupleTyping
    derives G |- Operation op <: NamedTuple params <: EObject ctx
from {
    val exprMap = <String, Expression> newHashMap(params.expressions.map[it.name -> it.expression])
    val paramMap = <String, Parameter> newHashMap(op.getParameters.map[
        it.name -> it 
    ])
    val problematicValues = exprMap.filter[name, expr|
            val parameter = paramMap.get(name)
            expr == null ||
            parameter == null ||
            !{G |- expr |> replaceGenericTypeReference(G, parameter.typeOf, ctx)}
        ]
    val problematicDeclarations = paramMap.filter[name, parameter|
            val expr = exprMap.get(name)
            parameter == null ||
            expr == null ||
            !{G |- expr |> replaceGenericTypeReference(G, parameter.typeOf, ctx)}
        ]
    if(problematicValues.size > 0) {
        val param = problematicValues.values.findFirst[true]
        fail error "Invalid parameter" source param
    }
    if (problematicDeclarations.size > 0) {
        fail
    }
}

/**
 * Expression typing
 */  
rule NumericUnaryExpression
    G |- NumericUnaryExpression ex : IUMLTypeReference result
from {
    {
        ex.operand.type.value == INTEGER.primitiveTypeReference(ex.umlContext)
        result = INTEGER.primitiveTypeReference(ex.umlContext)
    } or {
        ex.operand.type.value == REAL.primitiveTypeReference(ex.umlContext)
        result = REAL.primitiveTypeReference(ex.umlContext)
    }
}

rule ArithmeticExpression
    G |- ArithmeticExpression ex : IUMLTypeReference result
from {
   G |- ex.operand1 : var IUMLTypeReference type1
   G |- ex.operand2 : var IUMLTypeReference type2  
   { 
       ex.operator == "+"
       type1 == STRING.primitiveTypeReference(ex.umlContext)
       type2 == STRING.primitiveTypeReference(ex.umlContext)
       result = STRING.primitiveTypeReference(ex.umlContext)
   } or {
       ex.operator == "+"
       type1 == REAL.primitiveTypeReference(ex.umlContext)
       type2 == REAL.primitiveTypeReference(ex.umlContext) || type2 == INTEGER.primitiveTypeReference(ex.umlContext)
       result = REAL.primitiveTypeReference(ex.umlContext)
   } or {
       ex.operator == "+"
       type1 == REAL.primitiveTypeReference(ex.umlContext) || type1 == INTEGER.primitiveTypeReference(ex.umlContext)
       type2 == REAL.primitiveTypeReference(ex.umlContext)
       result = REAL.primitiveTypeReference(ex.umlContext)
   } or {
       ex.operator != "%"
       type1 == REAL.primitiveTypeReference(ex.umlContext)
       type2 == INTEGER.primitiveTypeReference(ex.umlContext) || type2 == REAL.primitiveTypeReference(ex.umlContext)
       result = REAL.primitiveTypeReference(ex.umlContext)
   } or {
       ex.operator != "%"
       type1 == INTEGER.primitiveTypeReference(ex.umlContext) || type1 == REAL.primitiveTypeReference(ex.umlContext)
       type2 == REAL.primitiveTypeReference(ex.umlContext)
       result = REAL.primitiveTypeReference(ex.umlContext)
   } or {
       //All operations
       type1 == INTEGER.primitiveTypeReference(ex.umlContext)
       type2 == INTEGER.primitiveTypeReference(ex.umlContext)
       result = INTEGER.primitiveTypeReference(ex.umlContext)
   }
} 

rule NameExpression
    G |- NameExpression ex : IUMLTypeReference result
from {
    G |- ex.reference : var IUMLTypeReference varType
    result = varType
} 

rule FilterExpression
    G |- FilterExpression ex : IUMLTypeReference result
from {
	G |- ex.declaration : var IUMLTypeReference declarationType
    G |- ex.expression : var IUMLTypeReference expType
    G |- ex.context : var CollectionTypeReference contextType
    
	G |- contextType.valueType <: declarationType : ex.umlContext
    expType == BOOLEAN.primitiveTypeReference(ex.umlContext)
    result = contextType
}

rule AssignmentExpression
    G |- AssignmentExpression ex : IUMLTypeReference result
from {
    G |- ex.leftHandSide : var IUMLTypeReference leftType
    G |- ex.rightHandSide : var IUMLTypeReference rightType
    G |- leftType <: rightType : ex.umlContext
    result = rightType
}

rule PrefixExpression
    G |- PrefixExpression ex : IUMLTypeReference result
from {
    G |- ex.operand : var IUMLTypeReference opType
    opType == INTEGER.primitiveTypeReference(ex.umlContext)
    result = INTEGER.primitiveTypeReference(ex.umlContext)
}

rule PostfixExpression
    G |- PostfixExpression ex : IUMLTypeReference result
from {
    G |- ex.operand : var IUMLTypeReference opType
    opType == INTEGER.primitiveTypeReference(ex.umlContext)
    result = INTEGER.primitiveTypeReference(ex.umlContext)
}

rule ShiftExpression
    G |- ShiftExpression ex : IUMLTypeReference result
from {
   G |- ex.operand1 : var IUMLTypeReference op1Type 
   G |- ex.operand2 : var IUMLTypeReference op2Type
   op1Type == INTEGER.primitiveTypeReference(ex.umlContext)
   op2Type == INTEGER.primitiveTypeReference(ex.umlContext)
   result   = INTEGER.primitiveTypeReference(ex.umlContext)
}

rule EqualityExpression
    G |- EqualityExpression ex : IUMLTypeReference result
from {
    G |- ex.operand1 : var IUMLTypeReference op1Type 
    G |- ex.operand2 : var IUMLTypeReference op2Type
    {
        G |- op1Type <: op2Type : ex.umlContext
        or
        G |- op2Type <: op1Type : ex.umlContext
    } 
    result = BOOLEAN.primitiveTypeReference(ex.umlContext)
}

rule RelationalExpression
    G |- RelationalExpression ex : IUMLTypeReference result
from {
    G |- ex.operand1 : var IUMLTypeReference op1Type 
    G |- ex.operand2 : var IUMLTypeReference op2Type
    op1Type == INTEGER.primitiveTypeReference(ex.umlContext) || op1Type == REAL.primitiveTypeReference(ex.umlContext) 
    op2Type == INTEGER.primitiveTypeReference(ex.umlContext) || op2Type == REAL.primitiveTypeReference(ex.umlContext)
    result = BOOLEAN.primitiveTypeReference(ex.umlContext)
}

rule LogicalUnaryExpression
    G |- BooleanUnaryExpression ex : IUMLTypeReference result
from {
    G |- ex.operand : var IUMLTypeReference opType
    opType == BOOLEAN.primitiveTypeReference(ex.umlContext)
    result = BOOLEAN.primitiveTypeReference(ex.umlContext)
}

rule LogicalExpression
    G |- LogicalExpression ex : IUMLTypeReference result
from {
    G |- ex.operand1 : var IUMLTypeReference op1Type 
    G |- ex.operand2 : var IUMLTypeReference op2Type
    {
        op1Type == BOOLEAN.primitiveTypeReference(ex.umlContext)
        op2Type == BOOLEAN.primitiveTypeReference(ex.umlContext)
        result = BOOLEAN.primitiveTypeReference(ex.umlContext)
    } or {
        op1Type == INTEGER.primitiveTypeReference(ex.umlContext)
        op2Type == INTEGER.primitiveTypeReference(ex.umlContext)
        result = INTEGER.primitiveTypeReference(ex.umlContext)
    }
}

rule ConditionalLogicalExpression
    G |- ConditionalLogicalExpression ex : IUMLTypeReference result
from {
    G |- ex.operand1 : var IUMLTypeReference op1Type 
    G |- ex.operand2 : var IUMLTypeReference op2Type
    op1Type == BOOLEAN.primitiveTypeReference(ex.umlContext)
    op2Type == BOOLEAN.primitiveTypeReference(ex.umlContext)
    result = BOOLEAN.primitiveTypeReference(ex.umlContext)
}

rule ConditionalTestExpression
    G |- ConditionalTestExpression ex : IUMLTypeReference result
from {
    G |- ex.operand1 : var IUMLTypeReference condType
    G |- ex.operand2 : var IUMLTypeReference trueType
    G |- ex.operand3 : var IUMLTypeReference falseType
    G |- trueType <: falseType : ex.umlContext 
    condType == BOOLEAN.primitiveTypeReference(ex.umlContext)
    result = trueType
}


rule InstanceCreationExpression
    G |- InstanceCreationExpression ex : IUMLTypeReference result
from {
    {
        ex.instance == null
        fail error "Invalid instance definition" source ex.instance
    } or {
        ex.instance != null
        // Primitive types cannot be instantiated
        !(ex.instance instanceof PrimitiveType)
    
        // Return typing
        result = ex.instance.typeReference
    
    }
}


rule InstanceDeletionExpression
    G |- InstanceDeletionExpression ex : IUMLTypeReference result
from {
    G |- ex.reference : var UMLTypeReference refType
    // Primitive types cannot be deleted
    !(refType.umlType instanceof PrimitiveType)
    
    result = voidType
}

rule ThisExpression
    G |- ThisExpression ex : IUMLTypeReference result
from {
    if (ex.umlContext.thisType == null) {
        result = anyType
    } else {
        result = ex.umlContext.thisType.typeReference
    }
}

rule SignalDataExpression
derives G |- SignalDataExpression ex : IUMLTypeReference result
from {
    val signalType = ex.umlContext.incomingSignalType
    if (signalType == null || signalType.eIsProxy) {
        fail "No incoming signal available in current context"
    } else {
        result = signalType.typeReference        
    }
}

rule AssociationAccessExpression
    G |- AssociationAccessExpression ex : IUMLTypeReference result
from {
    ex.association != null
    !ex.association.eIsProxy
    G |- ex.context : var IUMLTypeReference contextType
    result = ex.association.collectionTypeOf(contextType)
}

rule LinkOperationExpression
    G |- LinkOperationExpression ex : IUMLTypeReference result
from {
    {
        !ex.association.reference.eIsProxy()
        ex.association.reference instanceof Association 
        ex.linkOperation == LinkOperation.LINK
    }  or {
    } 
    result = BOOLEAN.primitiveTypeReference(umlContext(ex))
}

rule CollectionConstructionExpression
    derives G |- ElementCollectionExpression ex : IUMLTypeReference result
from {
    val valueType = if (ex.typeDeclaration != null) {
        ex.typeDeclaration.typeReference
    } else if (ex.elements.expressions.size > 0) {
        //TODO is required to calculate the common parent type here?
        G |- ex.elements.expressions.get(0) : var IUMLTypeReference inferredType
        inferredType
    } else {
        anyType
    }
    
    for (element : ex.elements.expressions) {
        G |- element : var IUMLTypeReference elType
        G |- valueType <: elType : ex.umlContext
    }
    if (ex.collectionType != null) {
        result = valueType.collectionOf(ex.collectionType)
    } else {
        result = valueType.sequenceOf   
    }
}

rule FeatureInvocationExpression
    derives G |- FeatureInvocationExpression ex : IUMLTypeReference result
from {
//    !(ex.eGet(featureInvocationExpression_Feature, true) as EObject).eIsProxy
    {
        ex.^feature instanceof Operation
        G |- ex.^feature : var IUMLTypeReference opType        
        result = replaceGenericTypeReference(G, opType, ex.context)
    } or {
        ex.^feature instanceof Property
        val property = ex.^feature as Property
        G |- property : result
    } or {
        fail error previousFailure.message feature featureInvocationExpression_Feature
    }
}

rule StaticFeatureInvocationExpression
    derives G |- StaticFeatureInvocationExpression ex : IUMLTypeReference result
from {
    G |- ex.operation : result
}

rule Operation
    derives G |- Operation op : IUMLTypeReference result
from {
    {
        op.getType == null
        result = voidType 
    } or {
        result = op.returnParameter.typeOf
    }
}

rule ClassExtentExpression
    derives G |- ClassExtentExpression ex : IUMLTypeReference result
from {
    G |- ex.class_ : var IUMLTypeReference classType
    result = setOf(classType)
}

rule CastExpression
    derives G |- CastExpression ex : IUMLTypeReference result
from {
    G |- ex.type : var IUMLTypeReference castType
    result = castType
}

//Non-expression types

rule FeatureLeftHandSide
    G |- LeftHandSide lhs : IUMLTypeReference result
from {
    G |- lhs.expression : var IUMLTypeReference exType
    result = exType
}


/**
 * Validation rules
 */

checkrule CheckExpressionType for
    Expression ex
from {
    empty |- ex : var IUMLTypeReference type
}

checkrule VariableType for
    Variable ^var
from {
    empty |- ^var : var IUMLTypeReference type
}

checkrule LocalNameDeclarationStatementType for
    LocalNameDeclarationStatement st
from {
    empty |- st.variable : var IUMLTypeReference varType
    if(st.expression != null){
    	empty |- st.expression : var IUMLTypeReference valueType
    	empty |- varType <: valueType : st.umlContext
    }
       
}

checkrule IfClause for
    IfClause cl
from {
    empty |- cl.^condition : var IUMLTypeReference condType
    empty |- condType <: BOOLEAN.primitiveTypeReference(cl.umlContext) : cl.umlContext
}

checkrule ForStatement for
    ForStatement st
from {
    empty |- st.^condition : var IUMLTypeReference condType
    empty |- condType <: BOOLEAN.primitiveTypeReference(st.umlContext) : st.umlContext
}

checkrule ForEachStatement for
    ForEachStatement st
from {
    empty |- st.expression  : var IUMLTypeReference exType
	empty |- st.variableDefinition  : var IUMLTypeReference defType
	if(exType instanceof CollectionTypeReference){
		empty |- exType.valueType <: defType : st.umlContext
	}else{
		fail
        error "Invalid collection type "
	}
}

checkrule WhileStatement for
    WhileStatement st
from {
    empty |- st.^condition : var IUMLTypeReference condType
    empty |- condType <: BOOLEAN.primitiveTypeReference(st.umlContext) : st.umlContext
}

checkrule DoStatement for
    DoStatement st
from {
    empty |- st.^condition : var IUMLTypeReference condType
    empty |- condType <: BOOLEAN.primitiveTypeReference(st.umlContext) : st.umlContext
}

checkrule SwitchStatement_ for
    SwitchStatement st
from {
    //Proper type
    empty |- st.expression : var IUMLTypeReference eType
    {
        INTEGER.primitiveTypeReference(st.umlContext) == eType
    } or {
        STRING.primitiveTypeReference(st.umlContext) == eType
    }
    //cases match the type
    for(SwitchClause cl : st.nonDefaultClause){
        for(Expression ex : cl.^case){
            empty |- ex : var IUMLTypeReference caseType
            empty |- st.expression |> caseType
        }
    }
    
}

checkrule SendSignalStatement for
    SendSignalStatement st
from {
    empty |- st.signal : var UMLTypeReference signalType
    empty |- st.target : var UMLTypeReference targetType
    if (!(signalType.umlType instanceof Signal)) {
        fail
        error "Invalid signal type " + signalType.umlType.name
        source st.signal
    }
    if (!(targetType.umlType instanceof Class)) {
        fail
        error "Invalid signal target " + targetType.umlType.name
        source st.target
    } else if (st.target instanceof NameExpression && (st.target as NameExpression).reference instanceof Type) {
        fail 
        error "Invalid signal target " + targetType.umlType.name
        source st.target
        
    }
}

checkrule ReturnStatement for
    ReturnStatement st
from {
    val returnValue = st.umlContext.definedOperation?.returnParameter
    {
        returnValue == null    
        st.expression == null
    } or {
        returnValue != null    
        st.expression != null
        empty |- st.expression : var IUMLTypeReference exprType
        val returnType = returnValue.type.typeReference
        empty |- returnType <: exprType : st.umlContext
    } or {
        returnValue == null    
        st.expression != null
        fail
            error "Unexpected return value " + st.expression.stringRep
            source st.expression
    }
}

checkrule OperationParameters for 
    FeatureInvocationExpression ex
from {
    {
        ex.^feature instanceof Operation
        empty |- (ex.^feature as Operation) <: ex.parameters <: ex.context
    } or {
    }
}

checkrule StaticOperationParameters for
    StaticFeatureInvocationExpression ex
from {
    {
        ex.operation.reference.eIsProxy
    } or {
        ex.operation.reference instanceof Operation
        empty |- (ex.operation.reference as Operation) <: ex.parameters <: ex
    }
}

checkrule InstanceCreationExpressionParameter for
    InstanceCreationExpression ex
from {
    val candidates = ex.instance.constructorOperationCandidates(ex.parameters)
    val filteredCandidates = candidates.calculateBestCandidates(ex.parameters, ex)
    
    if (candidates.isEmpty) {
        if (!(ex.parameters instanceof ExpressionList) || !(ex.parameters as ExpressionList).expressions.isEmpty) {
            fail 
                error "Default constructor cannot have parameters"
                source ex.parameters
        }
    } else if (filteredCandidates.isEmpty) {
        fail
            error "No constructors match parameters"
           source ex.parameters
    } else if (filteredCandidates.size == 1) {
        empty |- filteredCandidates.get(0) <: ex.parameters <: ex
    } else {
        fail 
          error "Multiple constructor candidates match the parameters"
          source ex.parameters
    }
}
/*
 * generated by Xtext
 */
package com.incquerylabs.uml.ralf.validation

import com.incquerylabs.uml.ralf.reducedAlfLanguage.Block
import com.incquerylabs.uml.ralf.reducedAlfLanguage.BlockStatement
import com.incquerylabs.uml.ralf.reducedAlfLanguage.BreakStatement
import com.incquerylabs.uml.ralf.reducedAlfLanguage.DoStatement
import com.incquerylabs.uml.ralf.reducedAlfLanguage.ForStatement
import com.incquerylabs.uml.ralf.reducedAlfLanguage.LocalNameDeclarationStatement
import com.incquerylabs.uml.ralf.reducedAlfLanguage.ReducedAlfLanguagePackage
import com.incquerylabs.uml.ralf.reducedAlfLanguage.Statement
import com.incquerylabs.uml.ralf.reducedAlfLanguage.Statements
import com.incquerylabs.uml.ralf.reducedAlfLanguage.SwitchClause
import com.incquerylabs.uml.ralf.reducedAlfLanguage.WhileStatement
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check

//import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class ReducedAlfLanguageValidator extends ReducedAlfSystemValidator {

	@Check
	def duplicateLocalVariables(LocalNameDeclarationStatement st) {
		var EObject checkedContainer = st;
		var EObject container = st;
		do {
			container = container.eContainer
			var visitedContainer = false
			if (container instanceof Block) {
				for (Statement statement : container.statement) {
					if (!visitedContainer) {
						if (statement.equals(checkedContainer)) {
							visitedContainer = true
						} else {
							if (statement instanceof LocalNameDeclarationStatement) {
								if (statement.variable.name.equals(st.variable.name)) {
									error("Duplicate local variable name", ReducedAlfLanguagePackage.Literals.LOCAL_NAME_DECLARATION_STATEMENT__VARIABLE)
								}
							}
						}

					}
				}
			}
			if (container instanceof Statements) {
				for (Statement statement : container.statement) {
					if (!visitedContainer) {
						if (statement.equals(checkedContainer)) {
							visitedContainer = true
						} else {
							if (statement instanceof LocalNameDeclarationStatement) {
								if (statement.variable.name.equals(st.variable.name)) {
									error("Duplicate local variable name", ReducedAlfLanguagePackage.Literals.LOCAL_NAME_DECLARATION_STATEMENT__VARIABLE)
								}
							}
						}

					}
				}
			}
			checkedContainer = container
		} while (!(container instanceof Statements));
	}
	
	@Check
	def invalidBreak(BreakStatement st) {
		var invalid = true;
		var container = st.eContainer
		while(!(container instanceof Statements)){
			if(container instanceof BlockStatement && (
				container.eContainer instanceof WhileStatement || 
				container.eContainer instanceof DoStatement || 
				container.eContainer instanceof ForStatement || 
				container.eContainer instanceof SwitchClause ))
			{
				invalid = false;
			}
			container = container.eContainer
		}
		if(invalid){
			error("Invalid break statement", st, null)
		}
	}
}
